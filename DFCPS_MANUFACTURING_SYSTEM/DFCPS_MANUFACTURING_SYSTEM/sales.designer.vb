'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="DFCPS_MANAGEMENT_DB")>  _
Partial Public Class salesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InserttblSalesCashInvoice(instance As tblSalesCashInvoice)
    End Sub
  Partial Private Sub UpdatetblSalesCashInvoice(instance As tblSalesCashInvoice)
    End Sub
  Partial Private Sub DeletetblSalesCashInvoice(instance As tblSalesCashInvoice)
    End Sub
  Partial Private Sub InserttblSalesChargeInvoice(instance As tblSalesChargeInvoice)
    End Sub
  Partial Private Sub UpdatetblSalesChargeInvoice(instance As tblSalesChargeInvoice)
    End Sub
  Partial Private Sub DeletetblSalesChargeInvoice(instance As tblSalesChargeInvoice)
    End Sub
  Partial Private Sub InserttblSalesOrder(instance As tblSalesOrder)
    End Sub
  Partial Private Sub UpdatetblSalesOrder(instance As tblSalesOrder)
    End Sub
  Partial Private Sub DeletetblSalesOrder(instance As tblSalesOrder)
    End Sub
  Partial Private Sub InserttblSalesQuotation(instance As tblSalesQuotation)
    End Sub
  Partial Private Sub UpdatetblSalesQuotation(instance As tblSalesQuotation)
    End Sub
  Partial Private Sub DeletetblSalesQuotation(instance As tblSalesQuotation)
    End Sub
  Partial Private Sub InserttblCardsProfile(instance As tblCardsProfile)
    End Sub
  Partial Private Sub UpdatetblCardsProfile(instance As tblCardsProfile)
    End Sub
  Partial Private Sub DeletetblCardsProfile(instance As tblCardsProfile)
    End Sub
  Partial Private Sub InserttblInvtry(instance As tblInvtry)
    End Sub
  Partial Private Sub UpdatetblInvtry(instance As tblInvtry)
    End Sub
  Partial Private Sub DeletetblInvtry(instance As tblInvtry)
    End Sub
  Partial Private Sub InserttblJob_item(instance As tblJob_item)
    End Sub
  Partial Private Sub UpdatetblJob_item(instance As tblJob_item)
    End Sub
  Partial Private Sub DeletetblJob_item(instance As tblJob_item)
    End Sub
  Partial Private Sub InserttblInvtry1(instance As tblInvtry1)
    End Sub
  Partial Private Sub UpdatetblInvtry1(instance As tblInvtry1)
    End Sub
  Partial Private Sub DeletetblInvtry1(instance As tblInvtry1)
    End Sub
  Partial Private Sub InserttblItem_unit(instance As tblItem_unit)
    End Sub
  Partial Private Sub UpdatetblItem_unit(instance As tblItem_unit)
    End Sub
  Partial Private Sub DeletetblItem_unit(instance As tblItem_unit)
    End Sub
  Partial Private Sub InserttblSales_price(instance As tblSales_price)
    End Sub
  Partial Private Sub UpdatetblSales_price(instance As tblSales_price)
    End Sub
  Partial Private Sub DeletetblSales_price(instance As tblSales_price)
    End Sub
  Partial Private Sub InserttblTrans_update_log(instance As tblTrans_update_log)
    End Sub
  Partial Private Sub UpdatetblTrans_update_log(instance As tblTrans_update_log)
    End Sub
  Partial Private Sub DeletetblTrans_update_log(instance As tblTrans_update_log)
    End Sub
  Partial Private Sub InserttblSalesDeliver(instance As tblSalesDeliver)
    End Sub
  Partial Private Sub UpdatetblSalesDeliver(instance As tblSalesDeliver)
    End Sub
  Partial Private Sub DeletetblSalesDeliver(instance As tblSalesDeliver)
    End Sub
  Partial Private Sub InserttblUser(instance As tblUser)
    End Sub
  Partial Private Sub UpdatetblUser(instance As tblUser)
    End Sub
  Partial Private Sub DeletetblUser(instance As tblUser)
    End Sub
  Partial Private Sub InserttblJobOrder(instance As tblJobOrder)
    End Sub
  Partial Private Sub UpdatetblJobOrder(instance As tblJobOrder)
    End Sub
  Partial Private Sub DeletetblJobOrder(instance As tblJobOrder)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.DFCPS_MANAGEMENT_SYSTEM.My.MySettings.Default.connString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property tblSalesCashInvoices() As System.Data.Linq.Table(Of tblSalesCashInvoice)
		Get
			Return Me.GetTable(Of tblSalesCashInvoice)
		End Get
	End Property
	
	Public ReadOnly Property tblSalesChargeInvoices() As System.Data.Linq.Table(Of tblSalesChargeInvoice)
		Get
			Return Me.GetTable(Of tblSalesChargeInvoice)
		End Get
	End Property
	
	Public ReadOnly Property tblSalesOrders() As System.Data.Linq.Table(Of tblSalesOrder)
		Get
			Return Me.GetTable(Of tblSalesOrder)
		End Get
	End Property
	
	Public ReadOnly Property tblSalesQuotations() As System.Data.Linq.Table(Of tblSalesQuotation)
		Get
			Return Me.GetTable(Of tblSalesQuotation)
		End Get
	End Property
	
	Public ReadOnly Property tblCardsProfiles() As System.Data.Linq.Table(Of tblCardsProfile)
		Get
			Return Me.GetTable(Of tblCardsProfile)
		End Get
	End Property
	
	Public ReadOnly Property tblInvtries() As System.Data.Linq.Table(Of tblInvtry)
		Get
			Return Me.GetTable(Of tblInvtry)
		End Get
	End Property
	
	Public ReadOnly Property tblJob_items() As System.Data.Linq.Table(Of tblJob_item)
		Get
			Return Me.GetTable(Of tblJob_item)
		End Get
	End Property
	
	Public ReadOnly Property tblInvtry1s() As System.Data.Linq.Table(Of tblInvtry1)
		Get
			Return Me.GetTable(Of tblInvtry1)
		End Get
	End Property
	
	Public ReadOnly Property tblItem_issuances() As System.Data.Linq.Table(Of tblItem_issuance)
		Get
			Return Me.GetTable(Of tblItem_issuance)
		End Get
	End Property
	
	Public ReadOnly Property tblItem_units() As System.Data.Linq.Table(Of tblItem_unit)
		Get
			Return Me.GetTable(Of tblItem_unit)
		End Get
	End Property
	
	Public ReadOnly Property tblItemTransactions() As System.Data.Linq.Table(Of tblItemTransaction)
		Get
			Return Me.GetTable(Of tblItemTransaction)
		End Get
	End Property
	
	Public ReadOnly Property tblSales_prices() As System.Data.Linq.Table(Of tblSales_price)
		Get
			Return Me.GetTable(Of tblSales_price)
		End Get
	End Property
	
	Public ReadOnly Property tblTrans_update_logs() As System.Data.Linq.Table(Of tblTrans_update_log)
		Get
			Return Me.GetTable(Of tblTrans_update_log)
		End Get
	End Property
	
	Public ReadOnly Property InventoryListAllViews() As System.Data.Linq.Table(Of InventoryListAllView)
		Get
			Return Me.GetTable(Of InventoryListAllView)
		End Get
	End Property
	
	Public ReadOnly Property tblSalesItemsTRs() As System.Data.Linq.Table(Of tblSalesItemsTR)
		Get
			Return Me.GetTable(Of tblSalesItemsTR)
		End Get
	End Property
	
	Public ReadOnly Property tblSalesDelivers() As System.Data.Linq.Table(Of tblSalesDeliver)
		Get
			Return Me.GetTable(Of tblSalesDeliver)
		End Get
	End Property
	
	Public ReadOnly Property tblUsers() As System.Data.Linq.Table(Of tblUser)
		Get
			Return Me.GetTable(Of tblUser)
		End Get
	End Property
	
	Public ReadOnly Property tblJobOrders() As System.Data.Linq.Table(Of tblJobOrder)
		Get
			Return Me.GetTable(Of tblJobOrder)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSalesCashInvoice")>  _
Partial Public Class tblSalesCashInvoice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _salesCashInvoiceNo As String
	
	Private _transDate As System.Nullable(Of Date)
	
	Private _refNo As String
	
	Private _cardID As String
	
	Private _totalFullAmount As System.Nullable(Of Decimal)
	
	Private _totalDiscount As System.Nullable(Of Decimal)
	
	Private _totalAmount As System.Nullable(Of Decimal)
	
	Private _userID As String
	
	Private _status As String
	
	Private _notimesedit As System.Nullable(Of Integer)
	
	Private _lastdateedit As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsalesCashInvoiceNoChanging(value As String)
    End Sub
    Partial Private Sub OnsalesCashInvoiceNoChanged()
    End Sub
    Partial Private Sub OntransDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OntransDateChanged()
    End Sub
    Partial Private Sub OnrefNoChanging(value As String)
    End Sub
    Partial Private Sub OnrefNoChanged()
    End Sub
    Partial Private Sub OncardIDChanging(value As String)
    End Sub
    Partial Private Sub OncardIDChanged()
    End Sub
    Partial Private Sub OntotalFullAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalFullAmountChanged()
    End Sub
    Partial Private Sub OntotalDiscountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalDiscountChanged()
    End Sub
    Partial Private Sub OntotalAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalAmountChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnnotimeseditChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnotimeseditChanged()
    End Sub
    Partial Private Sub OnlastdateeditChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnlastdateeditChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_salesCashInvoiceNo", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property salesCashInvoiceNo() As String
		Get
			Return Me._salesCashInvoiceNo
		End Get
		Set
			If (String.Equals(Me._salesCashInvoiceNo, value) = false) Then
				Me.OnsalesCashInvoiceNoChanging(value)
				Me.SendPropertyChanging
				Me._salesCashInvoiceNo = value
				Me.SendPropertyChanged("salesCashInvoiceNo")
				Me.OnsalesCashInvoiceNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transDate", DbType:="DateTime2")>  _
	Public Property transDate() As System.Nullable(Of Date)
		Get
			Return Me._transDate
		End Get
		Set
			If (Me._transDate.Equals(value) = false) Then
				Me.OntransDateChanging(value)
				Me.SendPropertyChanging
				Me._transDate = value
				Me.SendPropertyChanged("transDate")
				Me.OntransDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_refNo", DbType:="VarChar(255)")>  _
	Public Property refNo() As String
		Get
			Return Me._refNo
		End Get
		Set
			If (String.Equals(Me._refNo, value) = false) Then
				Me.OnrefNoChanging(value)
				Me.SendPropertyChanging
				Me._refNo = value
				Me.SendPropertyChanged("refNo")
				Me.OnrefNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardID", DbType:="VarChar(255)")>  _
	Public Property cardID() As String
		Get
			Return Me._cardID
		End Get
		Set
			If (String.Equals(Me._cardID, value) = false) Then
				Me.OncardIDChanging(value)
				Me.SendPropertyChanging
				Me._cardID = value
				Me.SendPropertyChanged("cardID")
				Me.OncardIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalFullAmount", DbType:="Decimal(20,2)")>  _
	Public Property totalFullAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._totalFullAmount
		End Get
		Set
			If (Me._totalFullAmount.Equals(value) = false) Then
				Me.OntotalFullAmountChanging(value)
				Me.SendPropertyChanging
				Me._totalFullAmount = value
				Me.SendPropertyChanged("totalFullAmount")
				Me.OntotalFullAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalDiscount", DbType:="Decimal(20,2)")>  _
	Public Property totalDiscount() As System.Nullable(Of Decimal)
		Get
			Return Me._totalDiscount
		End Get
		Set
			If (Me._totalDiscount.Equals(value) = false) Then
				Me.OntotalDiscountChanging(value)
				Me.SendPropertyChanging
				Me._totalDiscount = value
				Me.SendPropertyChanged("totalDiscount")
				Me.OntotalDiscountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalAmount", DbType:="Decimal(20,2)")>  _
	Public Property totalAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._totalAmount
		End Get
		Set
			If (Me._totalAmount.Equals(value) = false) Then
				Me.OntotalAmountChanging(value)
				Me.SendPropertyChanging
				Me._totalAmount = value
				Me.SendPropertyChanged("totalAmount")
				Me.OntotalAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="VarChar(255)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(255)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notimesedit", DbType:="Int")>  _
	Public Property notimesedit() As System.Nullable(Of Integer)
		Get
			Return Me._notimesedit
		End Get
		Set
			If (Me._notimesedit.Equals(value) = false) Then
				Me.OnnotimeseditChanging(value)
				Me.SendPropertyChanging
				Me._notimesedit = value
				Me.SendPropertyChanged("notimesedit")
				Me.OnnotimeseditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastdateedit", DbType:="DateTime2")>  _
	Public Property lastdateedit() As System.Nullable(Of Date)
		Get
			Return Me._lastdateedit
		End Get
		Set
			If (Me._lastdateedit.Equals(value) = false) Then
				Me.OnlastdateeditChanging(value)
				Me.SendPropertyChanging
				Me._lastdateedit = value
				Me.SendPropertyChanged("lastdateedit")
				Me.OnlastdateeditChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSalesChargeInvoice")>  _
Partial Public Class tblSalesChargeInvoice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _salesChargeInvoiceNo As String
	
	Private _transDate As System.Nullable(Of Date)
	
	Private _refNo As String
	
	Private _cardID As String
	
	Private _totalFullAmount As System.Nullable(Of Decimal)
	
	Private _totalDiscount As System.Nullable(Of Decimal)
	
	Private _totalAmount As System.Nullable(Of Decimal)
	
	Private _userID As String
	
	Private _status As String
	
	Private _notimesedit As System.Nullable(Of Integer)
	
	Private _lastdateedit As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsalesChargeInvoiceNoChanging(value As String)
    End Sub
    Partial Private Sub OnsalesChargeInvoiceNoChanged()
    End Sub
    Partial Private Sub OntransDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OntransDateChanged()
    End Sub
    Partial Private Sub OnrefNoChanging(value As String)
    End Sub
    Partial Private Sub OnrefNoChanged()
    End Sub
    Partial Private Sub OncardIDChanging(value As String)
    End Sub
    Partial Private Sub OncardIDChanged()
    End Sub
    Partial Private Sub OntotalFullAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalFullAmountChanged()
    End Sub
    Partial Private Sub OntotalDiscountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalDiscountChanged()
    End Sub
    Partial Private Sub OntotalAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalAmountChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnnotimeseditChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnotimeseditChanged()
    End Sub
    Partial Private Sub OnlastdateeditChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnlastdateeditChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_salesChargeInvoiceNo", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property salesChargeInvoiceNo() As String
		Get
			Return Me._salesChargeInvoiceNo
		End Get
		Set
			If (String.Equals(Me._salesChargeInvoiceNo, value) = false) Then
				Me.OnsalesChargeInvoiceNoChanging(value)
				Me.SendPropertyChanging
				Me._salesChargeInvoiceNo = value
				Me.SendPropertyChanged("salesChargeInvoiceNo")
				Me.OnsalesChargeInvoiceNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transDate", DbType:="DateTime2")>  _
	Public Property transDate() As System.Nullable(Of Date)
		Get
			Return Me._transDate
		End Get
		Set
			If (Me._transDate.Equals(value) = false) Then
				Me.OntransDateChanging(value)
				Me.SendPropertyChanging
				Me._transDate = value
				Me.SendPropertyChanged("transDate")
				Me.OntransDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_refNo", DbType:="VarChar(255)")>  _
	Public Property refNo() As String
		Get
			Return Me._refNo
		End Get
		Set
			If (String.Equals(Me._refNo, value) = false) Then
				Me.OnrefNoChanging(value)
				Me.SendPropertyChanging
				Me._refNo = value
				Me.SendPropertyChanged("refNo")
				Me.OnrefNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardID", DbType:="VarChar(255)")>  _
	Public Property cardID() As String
		Get
			Return Me._cardID
		End Get
		Set
			If (String.Equals(Me._cardID, value) = false) Then
				Me.OncardIDChanging(value)
				Me.SendPropertyChanging
				Me._cardID = value
				Me.SendPropertyChanged("cardID")
				Me.OncardIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalFullAmount", DbType:="Decimal(20,2)")>  _
	Public Property totalFullAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._totalFullAmount
		End Get
		Set
			If (Me._totalFullAmount.Equals(value) = false) Then
				Me.OntotalFullAmountChanging(value)
				Me.SendPropertyChanging
				Me._totalFullAmount = value
				Me.SendPropertyChanged("totalFullAmount")
				Me.OntotalFullAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalDiscount", DbType:="Decimal(20,2)")>  _
	Public Property totalDiscount() As System.Nullable(Of Decimal)
		Get
			Return Me._totalDiscount
		End Get
		Set
			If (Me._totalDiscount.Equals(value) = false) Then
				Me.OntotalDiscountChanging(value)
				Me.SendPropertyChanging
				Me._totalDiscount = value
				Me.SendPropertyChanged("totalDiscount")
				Me.OntotalDiscountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalAmount", DbType:="Decimal(20,2)")>  _
	Public Property totalAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._totalAmount
		End Get
		Set
			If (Me._totalAmount.Equals(value) = false) Then
				Me.OntotalAmountChanging(value)
				Me.SendPropertyChanging
				Me._totalAmount = value
				Me.SendPropertyChanged("totalAmount")
				Me.OntotalAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="VarChar(255)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(255)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notimesedit", DbType:="Int")>  _
	Public Property notimesedit() As System.Nullable(Of Integer)
		Get
			Return Me._notimesedit
		End Get
		Set
			If (Me._notimesedit.Equals(value) = false) Then
				Me.OnnotimeseditChanging(value)
				Me.SendPropertyChanging
				Me._notimesedit = value
				Me.SendPropertyChanged("notimesedit")
				Me.OnnotimeseditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastdateedit", DbType:="DateTime2")>  _
	Public Property lastdateedit() As System.Nullable(Of Date)
		Get
			Return Me._lastdateedit
		End Get
		Set
			If (Me._lastdateedit.Equals(value) = false) Then
				Me.OnlastdateeditChanging(value)
				Me.SendPropertyChanging
				Me._lastdateedit = value
				Me.SendPropertyChanged("lastdateedit")
				Me.OnlastdateeditChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSalesOrder")>  _
Partial Public Class tblSalesOrder
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _salesOrderNo As String
	
	Private _transDate As System.Nullable(Of Date)
	
	Private _refNo As String
	
	Private _cardID As String
	
	Private _totalAmount As System.Nullable(Of Decimal)
	
	Private _userID As String
	
	Private _status As String
	
	Private _notimesedit As System.Nullable(Of Integer)
	
	Private _lastdateedit As System.Nullable(Of Date)
	
	Private _tblCardsProfile As EntityRef(Of tblCardsProfile)
	
	Private _tblUser As EntityRef(Of tblUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsalesOrderNoChanging(value As String)
    End Sub
    Partial Private Sub OnsalesOrderNoChanged()
    End Sub
    Partial Private Sub OntransDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OntransDateChanged()
    End Sub
    Partial Private Sub OnrefNoChanging(value As String)
    End Sub
    Partial Private Sub OnrefNoChanged()
    End Sub
    Partial Private Sub OncardIDChanging(value As String)
    End Sub
    Partial Private Sub OncardIDChanged()
    End Sub
    Partial Private Sub OntotalAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalAmountChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnnotimeseditChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnotimeseditChanged()
    End Sub
    Partial Private Sub OnlastdateeditChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnlastdateeditChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblCardsProfile = CType(Nothing, EntityRef(Of tblCardsProfile))
		Me._tblUser = CType(Nothing, EntityRef(Of tblUser))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_salesOrderNo", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property salesOrderNo() As String
		Get
			Return Me._salesOrderNo
		End Get
		Set
			If (String.Equals(Me._salesOrderNo, value) = false) Then
				Me.OnsalesOrderNoChanging(value)
				Me.SendPropertyChanging
				Me._salesOrderNo = value
				Me.SendPropertyChanged("salesOrderNo")
				Me.OnsalesOrderNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transDate", DbType:="DateTime2")>  _
	Public Property transDate() As System.Nullable(Of Date)
		Get
			Return Me._transDate
		End Get
		Set
			If (Me._transDate.Equals(value) = false) Then
				Me.OntransDateChanging(value)
				Me.SendPropertyChanging
				Me._transDate = value
				Me.SendPropertyChanged("transDate")
				Me.OntransDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_refNo", DbType:="VarChar(255)")>  _
	Public Property refNo() As String
		Get
			Return Me._refNo
		End Get
		Set
			If (String.Equals(Me._refNo, value) = false) Then
				Me.OnrefNoChanging(value)
				Me.SendPropertyChanging
				Me._refNo = value
				Me.SendPropertyChanged("refNo")
				Me.OnrefNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardID", DbType:="VarChar(255)")>  _
	Public Property cardID() As String
		Get
			Return Me._cardID
		End Get
		Set
			If (String.Equals(Me._cardID, value) = false) Then
				If Me._tblCardsProfile.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncardIDChanging(value)
				Me.SendPropertyChanging
				Me._cardID = value
				Me.SendPropertyChanged("cardID")
				Me.OncardIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalAmount", DbType:="Decimal(20,2)")>  _
	Public Property totalAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._totalAmount
		End Get
		Set
			If (Me._totalAmount.Equals(value) = false) Then
				Me.OntotalAmountChanging(value)
				Me.SendPropertyChanging
				Me._totalAmount = value
				Me.SendPropertyChanged("totalAmount")
				Me.OntotalAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="VarChar(255)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				If Me._tblUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(255)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notimesedit", DbType:="Int")>  _
	Public Property notimesedit() As System.Nullable(Of Integer)
		Get
			Return Me._notimesedit
		End Get
		Set
			If (Me._notimesedit.Equals(value) = false) Then
				Me.OnnotimeseditChanging(value)
				Me.SendPropertyChanging
				Me._notimesedit = value
				Me.SendPropertyChanged("notimesedit")
				Me.OnnotimeseditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastdateedit", DbType:="DateTime2")>  _
	Public Property lastdateedit() As System.Nullable(Of Date)
		Get
			Return Me._lastdateedit
		End Get
		Set
			If (Me._lastdateedit.Equals(value) = false) Then
				Me.OnlastdateeditChanging(value)
				Me.SendPropertyChanging
				Me._lastdateedit = value
				Me.SendPropertyChanged("lastdateedit")
				Me.OnlastdateeditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCardsProfile_tblSalesOrder", Storage:="_tblCardsProfile", ThisKey:="cardID", OtherKey:="cardID", IsForeignKey:=true)>  _
	Public Property tblCardsProfile() As tblCardsProfile
		Get
			Return Me._tblCardsProfile.Entity
		End Get
		Set
			Dim previousValue As tblCardsProfile = Me._tblCardsProfile.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblCardsProfile.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblCardsProfile.Entity = Nothing
					previousValue.tblSalesOrders.Remove(Me)
				End If
				Me._tblCardsProfile.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblSalesOrders.Add(Me)
					Me._cardID = value.cardID
				Else
					Me._cardID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("tblCardsProfile")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblUser_tblSalesOrder", Storage:="_tblUser", ThisKey:="userID", OtherKey:="userID", IsForeignKey:=true)>  _
	Public Property tblUser() As tblUser
		Get
			Return Me._tblUser.Entity
		End Get
		Set
			Dim previousValue As tblUser = Me._tblUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblUser.Entity = Nothing
					previousValue.tblSalesOrders.Remove(Me)
				End If
				Me._tblUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblSalesOrders.Add(Me)
					Me._userID = value.userID
				Else
					Me._userID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("tblUser")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSalesQuotation")>  _
Partial Public Class tblSalesQuotation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _quoteNo As String
	
	Private _transDate As System.Nullable(Of Date)
	
	Private _cardID As String
	
	Private _totalAmount As System.Nullable(Of Decimal)
	
	Private _userID As String
	
	Private _status As String
	
	Private _notimesedit As System.Nullable(Of Integer)
	
	Private _lastdateedit As System.Nullable(Of Date)
	
	Private _tblCardsProfile As EntityRef(Of tblCardsProfile)
	
	Private _tblUser As EntityRef(Of tblUser)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnquoteNoChanging(value As String)
    End Sub
    Partial Private Sub OnquoteNoChanged()
    End Sub
    Partial Private Sub OntransDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OntransDateChanged()
    End Sub
    Partial Private Sub OncardIDChanging(value As String)
    End Sub
    Partial Private Sub OncardIDChanged()
    End Sub
    Partial Private Sub OntotalAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalAmountChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnnotimeseditChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnotimeseditChanged()
    End Sub
    Partial Private Sub OnlastdateeditChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnlastdateeditChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblCardsProfile = CType(Nothing, EntityRef(Of tblCardsProfile))
		Me._tblUser = CType(Nothing, EntityRef(Of tblUser))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_quoteNo", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property quoteNo() As String
		Get
			Return Me._quoteNo
		End Get
		Set
			If (String.Equals(Me._quoteNo, value) = false) Then
				Me.OnquoteNoChanging(value)
				Me.SendPropertyChanging
				Me._quoteNo = value
				Me.SendPropertyChanged("quoteNo")
				Me.OnquoteNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transDate", DbType:="DateTime2")>  _
	Public Property transDate() As System.Nullable(Of Date)
		Get
			Return Me._transDate
		End Get
		Set
			If (Me._transDate.Equals(value) = false) Then
				Me.OntransDateChanging(value)
				Me.SendPropertyChanging
				Me._transDate = value
				Me.SendPropertyChanged("transDate")
				Me.OntransDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardID", DbType:="VarChar(255)")>  _
	Public Property cardID() As String
		Get
			Return Me._cardID
		End Get
		Set
			If (String.Equals(Me._cardID, value) = false) Then
				If Me._tblCardsProfile.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OncardIDChanging(value)
				Me.SendPropertyChanging
				Me._cardID = value
				Me.SendPropertyChanged("cardID")
				Me.OncardIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalAmount", DbType:="Decimal(20,2)")>  _
	Public Property totalAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._totalAmount
		End Get
		Set
			If (Me._totalAmount.Equals(value) = false) Then
				Me.OntotalAmountChanging(value)
				Me.SendPropertyChanging
				Me._totalAmount = value
				Me.SendPropertyChanged("totalAmount")
				Me.OntotalAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="VarChar(255)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				If Me._tblUser.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(255)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notimesedit", DbType:="Int")>  _
	Public Property notimesedit() As System.Nullable(Of Integer)
		Get
			Return Me._notimesedit
		End Get
		Set
			If (Me._notimesedit.Equals(value) = false) Then
				Me.OnnotimeseditChanging(value)
				Me.SendPropertyChanging
				Me._notimesedit = value
				Me.SendPropertyChanged("notimesedit")
				Me.OnnotimeseditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastdateedit", DbType:="DateTime2")>  _
	Public Property lastdateedit() As System.Nullable(Of Date)
		Get
			Return Me._lastdateedit
		End Get
		Set
			If (Me._lastdateedit.Equals(value) = false) Then
				Me.OnlastdateeditChanging(value)
				Me.SendPropertyChanging
				Me._lastdateedit = value
				Me.SendPropertyChanged("lastdateedit")
				Me.OnlastdateeditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCardsProfile_tblSalesQuotation", Storage:="_tblCardsProfile", ThisKey:="cardID", OtherKey:="cardID", IsForeignKey:=true)>  _
	Public Property tblCardsProfile() As tblCardsProfile
		Get
			Return Me._tblCardsProfile.Entity
		End Get
		Set
			Dim previousValue As tblCardsProfile = Me._tblCardsProfile.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblCardsProfile.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblCardsProfile.Entity = Nothing
					previousValue.tblSalesQuotations.Remove(Me)
				End If
				Me._tblCardsProfile.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblSalesQuotations.Add(Me)
					Me._cardID = value.cardID
				Else
					Me._cardID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("tblCardsProfile")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblUser_tblSalesQuotation", Storage:="_tblUser", ThisKey:="userID", OtherKey:="userID", IsForeignKey:=true)>  _
	Public Property tblUser() As tblUser
		Get
			Return Me._tblUser.Entity
		End Get
		Set
			Dim previousValue As tblUser = Me._tblUser.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._tblUser.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._tblUser.Entity = Nothing
					previousValue.tblSalesQuotations.Remove(Me)
				End If
				Me._tblUser.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.tblSalesQuotations.Add(Me)
					Me._userID = value.userID
				Else
					Me._userID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("tblUser")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblCardsProfile")>  _
Partial Public Class tblCardsProfile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _cardID As String
	
	Private _cardName As String
	
	Private _cardAddress As String
	
	Private _cardCN As String
	
	Private _cardType As String
	
	Private _designation As String
	
	Private _allowCredit As String
	
	Private _creditLimit As String
	
	Private _cardStatus As String
	
	Private _tblSalesOrders As EntitySet(Of tblSalesOrder)
	
	Private _tblSalesQuotations As EntitySet(Of tblSalesQuotation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OncardIDChanging(value As String)
    End Sub
    Partial Private Sub OncardIDChanged()
    End Sub
    Partial Private Sub OncardNameChanging(value As String)
    End Sub
    Partial Private Sub OncardNameChanged()
    End Sub
    Partial Private Sub OncardAddressChanging(value As String)
    End Sub
    Partial Private Sub OncardAddressChanged()
    End Sub
    Partial Private Sub OncardCNChanging(value As String)
    End Sub
    Partial Private Sub OncardCNChanged()
    End Sub
    Partial Private Sub OncardTypeChanging(value As String)
    End Sub
    Partial Private Sub OncardTypeChanged()
    End Sub
    Partial Private Sub OndesignationChanging(value As String)
    End Sub
    Partial Private Sub OndesignationChanged()
    End Sub
    Partial Private Sub OnallowCreditChanging(value As String)
    End Sub
    Partial Private Sub OnallowCreditChanged()
    End Sub
    Partial Private Sub OncreditLimitChanging(value As String)
    End Sub
    Partial Private Sub OncreditLimitChanged()
    End Sub
    Partial Private Sub OncardStatusChanging(value As String)
    End Sub
    Partial Private Sub OncardStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblSalesOrders = New EntitySet(Of tblSalesOrder)(AddressOf Me.attach_tblSalesOrders, AddressOf Me.detach_tblSalesOrders)
		Me._tblSalesQuotations = New EntitySet(Of tblSalesQuotation)(AddressOf Me.attach_tblSalesQuotations, AddressOf Me.detach_tblSalesQuotations)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardID", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property cardID() As String
		Get
			Return Me._cardID
		End Get
		Set
			If (String.Equals(Me._cardID, value) = false) Then
				Me.OncardIDChanging(value)
				Me.SendPropertyChanging
				Me._cardID = value
				Me.SendPropertyChanged("cardID")
				Me.OncardIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardName", DbType:="VarChar(255)")>  _
	Public Property cardName() As String
		Get
			Return Me._cardName
		End Get
		Set
			If (String.Equals(Me._cardName, value) = false) Then
				Me.OncardNameChanging(value)
				Me.SendPropertyChanging
				Me._cardName = value
				Me.SendPropertyChanged("cardName")
				Me.OncardNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardAddress", DbType:="VarChar(255)")>  _
	Public Property cardAddress() As String
		Get
			Return Me._cardAddress
		End Get
		Set
			If (String.Equals(Me._cardAddress, value) = false) Then
				Me.OncardAddressChanging(value)
				Me.SendPropertyChanging
				Me._cardAddress = value
				Me.SendPropertyChanged("cardAddress")
				Me.OncardAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardCN", DbType:="VarChar(255)")>  _
	Public Property cardCN() As String
		Get
			Return Me._cardCN
		End Get
		Set
			If (String.Equals(Me._cardCN, value) = false) Then
				Me.OncardCNChanging(value)
				Me.SendPropertyChanging
				Me._cardCN = value
				Me.SendPropertyChanged("cardCN")
				Me.OncardCNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardType", DbType:="VarChar(255)")>  _
	Public Property cardType() As String
		Get
			Return Me._cardType
		End Get
		Set
			If (String.Equals(Me._cardType, value) = false) Then
				Me.OncardTypeChanging(value)
				Me.SendPropertyChanging
				Me._cardType = value
				Me.SendPropertyChanged("cardType")
				Me.OncardTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_designation", DbType:="VarChar(255)")>  _
	Public Property designation() As String
		Get
			Return Me._designation
		End Get
		Set
			If (String.Equals(Me._designation, value) = false) Then
				Me.OndesignationChanging(value)
				Me.SendPropertyChanging
				Me._designation = value
				Me.SendPropertyChanged("designation")
				Me.OndesignationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_allowCredit", DbType:="VarChar(255)")>  _
	Public Property allowCredit() As String
		Get
			Return Me._allowCredit
		End Get
		Set
			If (String.Equals(Me._allowCredit, value) = false) Then
				Me.OnallowCreditChanging(value)
				Me.SendPropertyChanging
				Me._allowCredit = value
				Me.SendPropertyChanged("allowCredit")
				Me.OnallowCreditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_creditLimit", DbType:="VarChar(255)")>  _
	Public Property creditLimit() As String
		Get
			Return Me._creditLimit
		End Get
		Set
			If (String.Equals(Me._creditLimit, value) = false) Then
				Me.OncreditLimitChanging(value)
				Me.SendPropertyChanging
				Me._creditLimit = value
				Me.SendPropertyChanged("creditLimit")
				Me.OncreditLimitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardStatus", DbType:="VarChar(255)")>  _
	Public Property cardStatus() As String
		Get
			Return Me._cardStatus
		End Get
		Set
			If (String.Equals(Me._cardStatus, value) = false) Then
				Me.OncardStatusChanging(value)
				Me.SendPropertyChanging
				Me._cardStatus = value
				Me.SendPropertyChanged("cardStatus")
				Me.OncardStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCardsProfile_tblSalesOrder", Storage:="_tblSalesOrders", ThisKey:="cardID", OtherKey:="cardID")>  _
	Public Property tblSalesOrders() As EntitySet(Of tblSalesOrder)
		Get
			Return Me._tblSalesOrders
		End Get
		Set
			Me._tblSalesOrders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblCardsProfile_tblSalesQuotation", Storage:="_tblSalesQuotations", ThisKey:="cardID", OtherKey:="cardID")>  _
	Public Property tblSalesQuotations() As EntitySet(Of tblSalesQuotation)
		Get
			Return Me._tblSalesQuotations
		End Get
		Set
			Me._tblSalesQuotations.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblSalesOrders(ByVal entity As tblSalesOrder)
		Me.SendPropertyChanging
		entity.tblCardsProfile = Me
	End Sub
	
	Private Sub detach_tblSalesOrders(ByVal entity As tblSalesOrder)
		Me.SendPropertyChanging
		entity.tblCardsProfile = Nothing
	End Sub
	
	Private Sub attach_tblSalesQuotations(ByVal entity As tblSalesQuotation)
		Me.SendPropertyChanging
		entity.tblCardsProfile = Me
	End Sub
	
	Private Sub detach_tblSalesQuotations(ByVal entity As tblSalesQuotation)
		Me.SendPropertyChanging
		entity.tblCardsProfile = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblInvtry")>  _
Partial Public Class tblInvtry
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ITEMNO As String
	
	Private _ITEMDESC As String
	
	Private _UNITCOST As System.Nullable(Of Decimal)
	
	Private _UNIT As String
	
	Private _UNITPRICE As System.Nullable(Of Decimal)
	
	Private _BUYABLE As String
	
	Private _SELLABLE As String
	
	Private _INVENTORABLE As String
	
	Private _COSTOFSALESACC As String
	
	Private _INCOMEACC As String
	
	Private _ASSETACC As String
	
	Private _MINIMUMSTOCK As String
	
	Private _STATUS As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnITEMNOChanging(value As String)
    End Sub
    Partial Private Sub OnITEMNOChanged()
    End Sub
    Partial Private Sub OnITEMDESCChanging(value As String)
    End Sub
    Partial Private Sub OnITEMDESCChanged()
    End Sub
    Partial Private Sub OnUNITCOSTChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUNITCOSTChanged()
    End Sub
    Partial Private Sub OnUNITChanging(value As String)
    End Sub
    Partial Private Sub OnUNITChanged()
    End Sub
    Partial Private Sub OnUNITPRICEChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnUNITPRICEChanged()
    End Sub
    Partial Private Sub OnBUYABLEChanging(value As String)
    End Sub
    Partial Private Sub OnBUYABLEChanged()
    End Sub
    Partial Private Sub OnSELLABLEChanging(value As String)
    End Sub
    Partial Private Sub OnSELLABLEChanged()
    End Sub
    Partial Private Sub OnINVENTORABLEChanging(value As String)
    End Sub
    Partial Private Sub OnINVENTORABLEChanged()
    End Sub
    Partial Private Sub OnCOSTOFSALESACCChanging(value As String)
    End Sub
    Partial Private Sub OnCOSTOFSALESACCChanged()
    End Sub
    Partial Private Sub OnINCOMEACCChanging(value As String)
    End Sub
    Partial Private Sub OnINCOMEACCChanged()
    End Sub
    Partial Private Sub OnASSETACCChanging(value As String)
    End Sub
    Partial Private Sub OnASSETACCChanged()
    End Sub
    Partial Private Sub OnMINIMUMSTOCKChanging(value As String)
    End Sub
    Partial Private Sub OnMINIMUMSTOCKChanged()
    End Sub
    Partial Private Sub OnSTATUSChanging(value As String)
    End Sub
    Partial Private Sub OnSTATUSChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITEMNO", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ITEMNO() As String
		Get
			Return Me._ITEMNO
		End Get
		Set
			If (String.Equals(Me._ITEMNO, value) = false) Then
				Me.OnITEMNOChanging(value)
				Me.SendPropertyChanging
				Me._ITEMNO = value
				Me.SendPropertyChanged("ITEMNO")
				Me.OnITEMNOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITEMDESC", DbType:="VarChar(255)")>  _
	Public Property ITEMDESC() As String
		Get
			Return Me._ITEMDESC
		End Get
		Set
			If (String.Equals(Me._ITEMDESC, value) = false) Then
				Me.OnITEMDESCChanging(value)
				Me.SendPropertyChanging
				Me._ITEMDESC = value
				Me.SendPropertyChanged("ITEMDESC")
				Me.OnITEMDESCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UNITCOST", DbType:="Decimal(20,2)")>  _
	Public Property UNITCOST() As System.Nullable(Of Decimal)
		Get
			Return Me._UNITCOST
		End Get
		Set
			If (Me._UNITCOST.Equals(value) = false) Then
				Me.OnUNITCOSTChanging(value)
				Me.SendPropertyChanging
				Me._UNITCOST = value
				Me.SendPropertyChanged("UNITCOST")
				Me.OnUNITCOSTChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UNIT", DbType:="VarChar(255)")>  _
	Public Property UNIT() As String
		Get
			Return Me._UNIT
		End Get
		Set
			If (String.Equals(Me._UNIT, value) = false) Then
				Me.OnUNITChanging(value)
				Me.SendPropertyChanging
				Me._UNIT = value
				Me.SendPropertyChanged("UNIT")
				Me.OnUNITChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UNITPRICE", DbType:="Decimal(20,2)")>  _
	Public Property UNITPRICE() As System.Nullable(Of Decimal)
		Get
			Return Me._UNITPRICE
		End Get
		Set
			If (Me._UNITPRICE.Equals(value) = false) Then
				Me.OnUNITPRICEChanging(value)
				Me.SendPropertyChanging
				Me._UNITPRICE = value
				Me.SendPropertyChanged("UNITPRICE")
				Me.OnUNITPRICEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BUYABLE", DbType:="VarChar(255)")>  _
	Public Property BUYABLE() As String
		Get
			Return Me._BUYABLE
		End Get
		Set
			If (String.Equals(Me._BUYABLE, value) = false) Then
				Me.OnBUYABLEChanging(value)
				Me.SendPropertyChanging
				Me._BUYABLE = value
				Me.SendPropertyChanged("BUYABLE")
				Me.OnBUYABLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SELLABLE", DbType:="VarChar(255)")>  _
	Public Property SELLABLE() As String
		Get
			Return Me._SELLABLE
		End Get
		Set
			If (String.Equals(Me._SELLABLE, value) = false) Then
				Me.OnSELLABLEChanging(value)
				Me.SendPropertyChanging
				Me._SELLABLE = value
				Me.SendPropertyChanged("SELLABLE")
				Me.OnSELLABLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INVENTORABLE", DbType:="VarChar(255)")>  _
	Public Property INVENTORABLE() As String
		Get
			Return Me._INVENTORABLE
		End Get
		Set
			If (String.Equals(Me._INVENTORABLE, value) = false) Then
				Me.OnINVENTORABLEChanging(value)
				Me.SendPropertyChanging
				Me._INVENTORABLE = value
				Me.SendPropertyChanged("INVENTORABLE")
				Me.OnINVENTORABLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COSTOFSALESACC", DbType:="VarChar(255)")>  _
	Public Property COSTOFSALESACC() As String
		Get
			Return Me._COSTOFSALESACC
		End Get
		Set
			If (String.Equals(Me._COSTOFSALESACC, value) = false) Then
				Me.OnCOSTOFSALESACCChanging(value)
				Me.SendPropertyChanging
				Me._COSTOFSALESACC = value
				Me.SendPropertyChanged("COSTOFSALESACC")
				Me.OnCOSTOFSALESACCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INCOMEACC", DbType:="VarChar(255)")>  _
	Public Property INCOMEACC() As String
		Get
			Return Me._INCOMEACC
		End Get
		Set
			If (String.Equals(Me._INCOMEACC, value) = false) Then
				Me.OnINCOMEACCChanging(value)
				Me.SendPropertyChanging
				Me._INCOMEACC = value
				Me.SendPropertyChanged("INCOMEACC")
				Me.OnINCOMEACCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ASSETACC", DbType:="VarChar(255)")>  _
	Public Property ASSETACC() As String
		Get
			Return Me._ASSETACC
		End Get
		Set
			If (String.Equals(Me._ASSETACC, value) = false) Then
				Me.OnASSETACCChanging(value)
				Me.SendPropertyChanging
				Me._ASSETACC = value
				Me.SendPropertyChanged("ASSETACC")
				Me.OnASSETACCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MINIMUMSTOCK", DbType:="VarChar(255)")>  _
	Public Property MINIMUMSTOCK() As String
		Get
			Return Me._MINIMUMSTOCK
		End Get
		Set
			If (String.Equals(Me._MINIMUMSTOCK, value) = false) Then
				Me.OnMINIMUMSTOCKChanging(value)
				Me.SendPropertyChanging
				Me._MINIMUMSTOCK = value
				Me.SendPropertyChanged("MINIMUMSTOCK")
				Me.OnMINIMUMSTOCKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STATUS", DbType:="VarChar(255)")>  _
	Public Property STATUS() As String
		Get
			Return Me._STATUS
		End Get
		Set
			If (String.Equals(Me._STATUS, value) = false) Then
				Me.OnSTATUSChanging(value)
				Me.SendPropertyChanging
				Me._STATUS = value
				Me.SendPropertyChanged("STATUS")
				Me.OnSTATUSChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblJob_items")>  _
Partial Public Class tblJob_item
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _JONO As String
	
	Private _ITEMCODE As String
	
	Private _QTY As System.Nullable(Of Integer)
	
	Private _ONHAND_QTY As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnJONOChanging(value As String)
    End Sub
    Partial Private Sub OnJONOChanged()
    End Sub
    Partial Private Sub OnITEMCODEChanging(value As String)
    End Sub
    Partial Private Sub OnITEMCODEChanged()
    End Sub
    Partial Private Sub OnQTYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnQTYChanged()
    End Sub
    Partial Private Sub OnONHAND_QTYChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnONHAND_QTYChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JONO", DbType:="VarChar(1)")>  _
	Public Property JONO() As String
		Get
			Return Me._JONO
		End Get
		Set
			If (String.Equals(Me._JONO, value) = false) Then
				Me.OnJONOChanging(value)
				Me.SendPropertyChanging
				Me._JONO = value
				Me.SendPropertyChanged("JONO")
				Me.OnJONOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITEMCODE", DbType:="VarChar(255)")>  _
	Public Property ITEMCODE() As String
		Get
			Return Me._ITEMCODE
		End Get
		Set
			If (String.Equals(Me._ITEMCODE, value) = false) Then
				Me.OnITEMCODEChanging(value)
				Me.SendPropertyChanging
				Me._ITEMCODE = value
				Me.SendPropertyChanged("ITEMCODE")
				Me.OnITEMCODEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QTY", DbType:="Int")>  _
	Public Property QTY() As System.Nullable(Of Integer)
		Get
			Return Me._QTY
		End Get
		Set
			If (Me._QTY.Equals(value) = false) Then
				Me.OnQTYChanging(value)
				Me.SendPropertyChanging
				Me._QTY = value
				Me.SendPropertyChanged("QTY")
				Me.OnQTYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ONHAND_QTY", DbType:="Int")>  _
	Public Property ONHAND_QTY() As System.Nullable(Of Integer)
		Get
			Return Me._ONHAND_QTY
		End Get
		Set
			If (Me._ONHAND_QTY.Equals(value) = false) Then
				Me.OnONHAND_QTYChanging(value)
				Me.SendPropertyChanging
				Me._ONHAND_QTY = value
				Me.SendPropertyChanged("ONHAND_QTY")
				Me.OnONHAND_QTYChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblInvtry")>  _
Partial Public Class tblInvtry1
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ITEMNO As String
	
	Private _ITEMDESC As String
	
	Private _BUYABLE As String
	
	Private _SELLABLE As String
	
	Private _INVENTORABLE As String
	
	Private _COSTOFSALESACC As String
	
	Private _INCOMEACC As String
	
	Private _ASSETACC As String
	
	Private _STATUS As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnITEMNOChanging(value As String)
    End Sub
    Partial Private Sub OnITEMNOChanged()
    End Sub
    Partial Private Sub OnITEMDESCChanging(value As String)
    End Sub
    Partial Private Sub OnITEMDESCChanged()
    End Sub
    Partial Private Sub OnBUYABLEChanging(value As String)
    End Sub
    Partial Private Sub OnBUYABLEChanged()
    End Sub
    Partial Private Sub OnSELLABLEChanging(value As String)
    End Sub
    Partial Private Sub OnSELLABLEChanged()
    End Sub
    Partial Private Sub OnINVENTORABLEChanging(value As String)
    End Sub
    Partial Private Sub OnINVENTORABLEChanged()
    End Sub
    Partial Private Sub OnCOSTOFSALESACCChanging(value As String)
    End Sub
    Partial Private Sub OnCOSTOFSALESACCChanged()
    End Sub
    Partial Private Sub OnINCOMEACCChanging(value As String)
    End Sub
    Partial Private Sub OnINCOMEACCChanged()
    End Sub
    Partial Private Sub OnASSETACCChanging(value As String)
    End Sub
    Partial Private Sub OnASSETACCChanged()
    End Sub
    Partial Private Sub OnSTATUSChanging(value As String)
    End Sub
    Partial Private Sub OnSTATUSChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITEMNO", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property ITEMNO() As String
		Get
			Return Me._ITEMNO
		End Get
		Set
			If (String.Equals(Me._ITEMNO, value) = false) Then
				Me.OnITEMNOChanging(value)
				Me.SendPropertyChanging
				Me._ITEMNO = value
				Me.SendPropertyChanged("ITEMNO")
				Me.OnITEMNOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITEMDESC", DbType:="VarChar(255)")>  _
	Public Property ITEMDESC() As String
		Get
			Return Me._ITEMDESC
		End Get
		Set
			If (String.Equals(Me._ITEMDESC, value) = false) Then
				Me.OnITEMDESCChanging(value)
				Me.SendPropertyChanging
				Me._ITEMDESC = value
				Me.SendPropertyChanged("ITEMDESC")
				Me.OnITEMDESCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BUYABLE", DbType:="VarChar(255)")>  _
	Public Property BUYABLE() As String
		Get
			Return Me._BUYABLE
		End Get
		Set
			If (String.Equals(Me._BUYABLE, value) = false) Then
				Me.OnBUYABLEChanging(value)
				Me.SendPropertyChanging
				Me._BUYABLE = value
				Me.SendPropertyChanged("BUYABLE")
				Me.OnBUYABLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SELLABLE", DbType:="VarChar(255)")>  _
	Public Property SELLABLE() As String
		Get
			Return Me._SELLABLE
		End Get
		Set
			If (String.Equals(Me._SELLABLE, value) = false) Then
				Me.OnSELLABLEChanging(value)
				Me.SendPropertyChanging
				Me._SELLABLE = value
				Me.SendPropertyChanged("SELLABLE")
				Me.OnSELLABLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INVENTORABLE", DbType:="VarChar(255)")>  _
	Public Property INVENTORABLE() As String
		Get
			Return Me._INVENTORABLE
		End Get
		Set
			If (String.Equals(Me._INVENTORABLE, value) = false) Then
				Me.OnINVENTORABLEChanging(value)
				Me.SendPropertyChanging
				Me._INVENTORABLE = value
				Me.SendPropertyChanged("INVENTORABLE")
				Me.OnINVENTORABLEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COSTOFSALESACC", DbType:="VarChar(255)")>  _
	Public Property COSTOFSALESACC() As String
		Get
			Return Me._COSTOFSALESACC
		End Get
		Set
			If (String.Equals(Me._COSTOFSALESACC, value) = false) Then
				Me.OnCOSTOFSALESACCChanging(value)
				Me.SendPropertyChanging
				Me._COSTOFSALESACC = value
				Me.SendPropertyChanged("COSTOFSALESACC")
				Me.OnCOSTOFSALESACCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INCOMEACC", DbType:="VarChar(255)")>  _
	Public Property INCOMEACC() As String
		Get
			Return Me._INCOMEACC
		End Get
		Set
			If (String.Equals(Me._INCOMEACC, value) = false) Then
				Me.OnINCOMEACCChanging(value)
				Me.SendPropertyChanging
				Me._INCOMEACC = value
				Me.SendPropertyChanged("INCOMEACC")
				Me.OnINCOMEACCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ASSETACC", DbType:="VarChar(255)")>  _
	Public Property ASSETACC() As String
		Get
			Return Me._ASSETACC
		End Get
		Set
			If (String.Equals(Me._ASSETACC, value) = false) Then
				Me.OnASSETACCChanging(value)
				Me.SendPropertyChanging
				Me._ASSETACC = value
				Me.SendPropertyChanged("ASSETACC")
				Me.OnASSETACCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STATUS", DbType:="VarChar(255)")>  _
	Public Property STATUS() As String
		Get
			Return Me._STATUS
		End Get
		Set
			If (String.Equals(Me._STATUS, value) = false) Then
				Me.OnSTATUSChanging(value)
				Me.SendPropertyChanging
				Me._STATUS = value
				Me.SendPropertyChanged("STATUS")
				Me.OnSTATUSChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblItem_issuance")>  _
Partial Public Class tblItem_issuance
	
	Private _issuanceNo As String
	
	Private _refNo As String
	
	Private _transDate As System.Nullable(Of Date)
	
	Private _totalItemCount As String
	
	Private _totalCost As System.Nullable(Of Decimal)
	
	Private _chargeToAccount As String
	
	Private _userID As String
	
	Private _status As String
	
	Private _notimesedit As System.Nullable(Of Integer)
	
	Private _lastdateedit As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_issuanceNo", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property issuanceNo() As String
		Get
			Return Me._issuanceNo
		End Get
		Set
			If (String.Equals(Me._issuanceNo, value) = false) Then
				Me._issuanceNo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_refNo", DbType:="VarChar(255)")>  _
	Public Property refNo() As String
		Get
			Return Me._refNo
		End Get
		Set
			If (String.Equals(Me._refNo, value) = false) Then
				Me._refNo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transDate", DbType:="DateTime2")>  _
	Public Property transDate() As System.Nullable(Of Date)
		Get
			Return Me._transDate
		End Get
		Set
			If (Me._transDate.Equals(value) = false) Then
				Me._transDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalItemCount", DbType:="VarChar(255)")>  _
	Public Property totalItemCount() As String
		Get
			Return Me._totalItemCount
		End Get
		Set
			If (String.Equals(Me._totalItemCount, value) = false) Then
				Me._totalItemCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalCost", DbType:="Decimal(20,2)")>  _
	Public Property totalCost() As System.Nullable(Of Decimal)
		Get
			Return Me._totalCost
		End Get
		Set
			If (Me._totalCost.Equals(value) = false) Then
				Me._totalCost = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_chargeToAccount", DbType:="VarChar(255)")>  _
	Public Property chargeToAccount() As String
		Get
			Return Me._chargeToAccount
		End Get
		Set
			If (String.Equals(Me._chargeToAccount, value) = false) Then
				Me._chargeToAccount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="VarChar(255)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(255)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notimesedit", DbType:="Int")>  _
	Public Property notimesedit() As System.Nullable(Of Integer)
		Get
			Return Me._notimesedit
		End Get
		Set
			If (Me._notimesedit.Equals(value) = false) Then
				Me._notimesedit = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastdateedit", DbType:="DateTime2")>  _
	Public Property lastdateedit() As System.Nullable(Of Date)
		Get
			Return Me._lastdateedit
		End Get
		Set
			If (Me._lastdateedit.Equals(value) = false) Then
				Me._lastdateedit = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblItem_units")>  _
Partial Public Class tblItem_unit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _unit_id As Integer
	
	Private _itemcode As String
	
	Private _unit_desc As String
	
	Private _minQty As System.Nullable(Of Decimal)
	
	Private _isDefault As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onunit_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onunit_idChanged()
    End Sub
    Partial Private Sub OnitemcodeChanging(value As String)
    End Sub
    Partial Private Sub OnitemcodeChanged()
    End Sub
    Partial Private Sub Onunit_descChanging(value As String)
    End Sub
    Partial Private Sub Onunit_descChanged()
    End Sub
    Partial Private Sub OnminQtyChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnminQtyChanged()
    End Sub
    Partial Private Sub OnisDefaultChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnisDefaultChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property unit_id() As Integer
		Get
			Return Me._unit_id
		End Get
		Set
			If ((Me._unit_id = value)  _
						= false) Then
				Me.Onunit_idChanging(value)
				Me.SendPropertyChanging
				Me._unit_id = value
				Me.SendPropertyChanged("unit_id")
				Me.Onunit_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemcode", DbType:="VarChar(255)")>  _
	Public Property itemcode() As String
		Get
			Return Me._itemcode
		End Get
		Set
			If (String.Equals(Me._itemcode, value) = false) Then
				Me.OnitemcodeChanging(value)
				Me.SendPropertyChanging
				Me._itemcode = value
				Me.SendPropertyChanged("itemcode")
				Me.OnitemcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_unit_desc", DbType:="VarChar(255)")>  _
	Public Property unit_desc() As String
		Get
			Return Me._unit_desc
		End Get
		Set
			If (String.Equals(Me._unit_desc, value) = false) Then
				Me.Onunit_descChanging(value)
				Me.SendPropertyChanging
				Me._unit_desc = value
				Me.SendPropertyChanged("unit_desc")
				Me.Onunit_descChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_minQty", DbType:="Decimal(20,2)")>  _
	Public Property minQty() As System.Nullable(Of Decimal)
		Get
			Return Me._minQty
		End Get
		Set
			If (Me._minQty.Equals(value) = false) Then
				Me.OnminQtyChanging(value)
				Me.SendPropertyChanging
				Me._minQty = value
				Me.SendPropertyChanged("minQty")
				Me.OnminQtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isDefault", DbType:="Decimal(20,2)")>  _
	Public Property isDefault() As System.Nullable(Of Decimal)
		Get
			Return Me._isDefault
		End Get
		Set
			If (Me._isDefault.Equals(value) = false) Then
				Me.OnisDefaultChanging(value)
				Me.SendPropertyChanging
				Me._isDefault = value
				Me.SendPropertyChanged("isDefault")
				Me.OnisDefaultChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblItemTransaction")>  _
Partial Public Class tblItemTransaction
	
	Private _dateTrans As System.Nullable(Of Date)
	
	Private _refNo As String
	
	Private _src As String
	
	Private _itemNo As String
	
	Private _UNITCOST As System.Nullable(Of Decimal)
	
	Private _qty As System.Nullable(Of Decimal)
	
	Private _job As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_dateTrans", DbType:="DateTime2")>  _
	Public Property dateTrans() As System.Nullable(Of Date)
		Get
			Return Me._dateTrans
		End Get
		Set
			If (Me._dateTrans.Equals(value) = false) Then
				Me._dateTrans = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_refNo", DbType:="VarChar(255)")>  _
	Public Property refNo() As String
		Get
			Return Me._refNo
		End Get
		Set
			If (String.Equals(Me._refNo, value) = false) Then
				Me._refNo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_src", DbType:="VarChar(255)")>  _
	Public Property src() As String
		Get
			Return Me._src
		End Get
		Set
			If (String.Equals(Me._src, value) = false) Then
				Me._src = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemNo", DbType:="VarChar(255)")>  _
	Public Property itemNo() As String
		Get
			Return Me._itemNo
		End Get
		Set
			If (String.Equals(Me._itemNo, value) = false) Then
				Me._itemNo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UNITCOST", DbType:="Decimal(20,2)")>  _
	Public Property UNITCOST() As System.Nullable(Of Decimal)
		Get
			Return Me._UNITCOST
		End Get
		Set
			If (Me._UNITCOST.Equals(value) = false) Then
				Me._UNITCOST = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qty", DbType:="Decimal(20,0)")>  _
	Public Property qty() As System.Nullable(Of Decimal)
		Get
			Return Me._qty
		End Get
		Set
			If (Me._qty.Equals(value) = false) Then
				Me._qty = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_job", DbType:="VarChar(255)")>  _
	Public Property job() As String
		Get
			Return Me._job
		End Get
		Set
			If (String.Equals(Me._job, value) = false) Then
				Me._job = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSales_price")>  _
Partial Public Class tblSales_price
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _price_id As Integer
	
	Private _itemcode As String
	
	Private _price As System.Nullable(Of Decimal)
	
	Private _date_set As System.Nullable(Of Date)
	
	Private _ref As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub Onprice_idChanging(value As Integer)
    End Sub
    Partial Private Sub Onprice_idChanged()
    End Sub
    Partial Private Sub OnitemcodeChanging(value As String)
    End Sub
    Partial Private Sub OnitemcodeChanged()
    End Sub
    Partial Private Sub OnpriceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnpriceChanged()
    End Sub
    Partial Private Sub Ondate_setChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Ondate_setChanged()
    End Sub
    Partial Private Sub OnrefChanging(value As String)
    End Sub
    Partial Private Sub OnrefChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property price_id() As Integer
		Get
			Return Me._price_id
		End Get
		Set
			If ((Me._price_id = value)  _
						= false) Then
				Me.Onprice_idChanging(value)
				Me.SendPropertyChanging
				Me._price_id = value
				Me.SendPropertyChanged("price_id")
				Me.Onprice_idChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemcode", DbType:="VarChar(255)")>  _
	Public Property itemcode() As String
		Get
			Return Me._itemcode
		End Get
		Set
			If (String.Equals(Me._itemcode, value) = false) Then
				Me.OnitemcodeChanging(value)
				Me.SendPropertyChanging
				Me._itemcode = value
				Me.SendPropertyChanged("itemcode")
				Me.OnitemcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Decimal(20,2)")>  _
	Public Property price() As System.Nullable(Of Decimal)
		Get
			Return Me._price
		End Get
		Set
			If (Me._price.Equals(value) = false) Then
				Me.OnpriceChanging(value)
				Me.SendPropertyChanging
				Me._price = value
				Me.SendPropertyChanged("price")
				Me.OnpriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_date_set", DbType:="DateTime2")>  _
	Public Property date_set() As System.Nullable(Of Date)
		Get
			Return Me._date_set
		End Get
		Set
			If (Me._date_set.Equals(value) = false) Then
				Me.Ondate_setChanging(value)
				Me.SendPropertyChanging
				Me._date_set = value
				Me.SendPropertyChanged("date_set")
				Me.Ondate_setChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ref", DbType:="VarChar(255)")>  _
	Public Property ref() As String
		Get
			Return Me._ref
		End Get
		Set
			If (String.Equals(Me._ref, value) = false) Then
				Me.OnrefChanging(value)
				Me.SendPropertyChanging
				Me._ref = value
				Me.SendPropertyChanged("ref")
				Me.OnrefChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblTrans_update_logs")>  _
Partial Public Class tblTrans_update_log
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _UPDATE_LOG_ID As String
	
	Private _SRC As String
	
	Private _TR_NO As String
	
	Private _DATE_OF_ACTION As System.Nullable(Of Date)
	
	Private _REASON_OF_ACTION As String
	
	Private _REMARKS As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnUPDATE_LOG_IDChanging(value As String)
    End Sub
    Partial Private Sub OnUPDATE_LOG_IDChanged()
    End Sub
    Partial Private Sub OnSRCChanging(value As String)
    End Sub
    Partial Private Sub OnSRCChanged()
    End Sub
    Partial Private Sub OnTR_NOChanging(value As String)
    End Sub
    Partial Private Sub OnTR_NOChanged()
    End Sub
    Partial Private Sub OnDATE_OF_ACTIONChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDATE_OF_ACTIONChanged()
    End Sub
    Partial Private Sub OnREASON_OF_ACTIONChanging(value As String)
    End Sub
    Partial Private Sub OnREASON_OF_ACTIONChanged()
    End Sub
    Partial Private Sub OnREMARKSChanging(value As String)
    End Sub
    Partial Private Sub OnREMARKSChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UPDATE_LOG_ID", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UPDATE_LOG_ID() As String
		Get
			Return Me._UPDATE_LOG_ID
		End Get
		Set
			If (String.Equals(Me._UPDATE_LOG_ID, value) = false) Then
				Me.OnUPDATE_LOG_IDChanging(value)
				Me.SendPropertyChanging
				Me._UPDATE_LOG_ID = value
				Me.SendPropertyChanged("UPDATE_LOG_ID")
				Me.OnUPDATE_LOG_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SRC", DbType:="VarChar(255)")>  _
	Public Property SRC() As String
		Get
			Return Me._SRC
		End Get
		Set
			If (String.Equals(Me._SRC, value) = false) Then
				Me.OnSRCChanging(value)
				Me.SendPropertyChanging
				Me._SRC = value
				Me.SendPropertyChanged("SRC")
				Me.OnSRCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TR_NO", DbType:="VarChar(255)")>  _
	Public Property TR_NO() As String
		Get
			Return Me._TR_NO
		End Get
		Set
			If (String.Equals(Me._TR_NO, value) = false) Then
				Me.OnTR_NOChanging(value)
				Me.SendPropertyChanging
				Me._TR_NO = value
				Me.SendPropertyChanged("TR_NO")
				Me.OnTR_NOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DATE_OF_ACTION", DbType:="DateTime2")>  _
	Public Property DATE_OF_ACTION() As System.Nullable(Of Date)
		Get
			Return Me._DATE_OF_ACTION
		End Get
		Set
			If (Me._DATE_OF_ACTION.Equals(value) = false) Then
				Me.OnDATE_OF_ACTIONChanging(value)
				Me.SendPropertyChanging
				Me._DATE_OF_ACTION = value
				Me.SendPropertyChanged("DATE_OF_ACTION")
				Me.OnDATE_OF_ACTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REASON_OF_ACTION", DbType:="VarChar(255)")>  _
	Public Property REASON_OF_ACTION() As String
		Get
			Return Me._REASON_OF_ACTION
		End Get
		Set
			If (String.Equals(Me._REASON_OF_ACTION, value) = false) Then
				Me.OnREASON_OF_ACTIONChanging(value)
				Me.SendPropertyChanging
				Me._REASON_OF_ACTION = value
				Me.SendPropertyChanged("REASON_OF_ACTION")
				Me.OnREASON_OF_ACTIONChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REMARKS", DbType:="VarChar(255)")>  _
	Public Property REMARKS() As String
		Get
			Return Me._REMARKS
		End Get
		Set
			If (String.Equals(Me._REMARKS, value) = false) Then
				Me.OnREMARKSChanging(value)
				Me.SendPropertyChanging
				Me._REMARKS = value
				Me.SendPropertyChanged("REMARKS")
				Me.OnREMARKSChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.InventoryListAllView")>  _
Partial Public Class InventoryListAllView
	
	Private _ITEMNO As String
	
	Private _ITEMDESC As String
	
	Private _UNIT As String
	
	Private _UNITCOST As System.Nullable(Of Decimal)
	
	Private _UNITPRICE As System.Nullable(Of Decimal)
	
	Private _QTY As System.Nullable(Of Decimal)
	
	Private _BUYABLE As String
	
	Private _SELLABLE As String
	
	Private _INVENTORABLE As String
	
	Private _COSTOFSALESACC As String
	
	Private _INCOMEACC As String
	
	Private _ASSETACC As String
	
	Private _MINQTY As Integer
	
	Private _PC_QTY As System.Nullable(Of Integer)
	
	Private _STATUS As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITEMNO", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property ITEMNO() As String
		Get
			Return Me._ITEMNO
		End Get
		Set
			If (String.Equals(Me._ITEMNO, value) = false) Then
				Me._ITEMNO = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ITEMDESC", DbType:="VarChar(255)")>  _
	Public Property ITEMDESC() As String
		Get
			Return Me._ITEMDESC
		End Get
		Set
			If (String.Equals(Me._ITEMDESC, value) = false) Then
				Me._ITEMDESC = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UNIT", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property UNIT() As String
		Get
			Return Me._UNIT
		End Get
		Set
			If (String.Equals(Me._UNIT, value) = false) Then
				Me._UNIT = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UNITCOST", DbType:="Decimal(38,6)")>  _
	Public Property UNITCOST() As System.Nullable(Of Decimal)
		Get
			Return Me._UNITCOST
		End Get
		Set
			If (Me._UNITCOST.Equals(value) = false) Then
				Me._UNITCOST = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UNITPRICE", DbType:="Decimal(20,2)")>  _
	Public Property UNITPRICE() As System.Nullable(Of Decimal)
		Get
			Return Me._UNITPRICE
		End Get
		Set
			If (Me._UNITPRICE.Equals(value) = false) Then
				Me._UNITPRICE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QTY", DbType:="Decimal(38,0)")>  _
	Public Property QTY() As System.Nullable(Of Decimal)
		Get
			Return Me._QTY
		End Get
		Set
			If (Me._QTY.Equals(value) = false) Then
				Me._QTY = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BUYABLE", DbType:="VarChar(255)")>  _
	Public Property BUYABLE() As String
		Get
			Return Me._BUYABLE
		End Get
		Set
			If (String.Equals(Me._BUYABLE, value) = false) Then
				Me._BUYABLE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SELLABLE", DbType:="VarChar(255)")>  _
	Public Property SELLABLE() As String
		Get
			Return Me._SELLABLE
		End Get
		Set
			If (String.Equals(Me._SELLABLE, value) = false) Then
				Me._SELLABLE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INVENTORABLE", DbType:="VarChar(255)")>  _
	Public Property INVENTORABLE() As String
		Get
			Return Me._INVENTORABLE
		End Get
		Set
			If (String.Equals(Me._INVENTORABLE, value) = false) Then
				Me._INVENTORABLE = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_COSTOFSALESACC", DbType:="VarChar(255)")>  _
	Public Property COSTOFSALESACC() As String
		Get
			Return Me._COSTOFSALESACC
		End Get
		Set
			If (String.Equals(Me._COSTOFSALESACC, value) = false) Then
				Me._COSTOFSALESACC = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_INCOMEACC", DbType:="VarChar(255)")>  _
	Public Property INCOMEACC() As String
		Get
			Return Me._INCOMEACC
		End Get
		Set
			If (String.Equals(Me._INCOMEACC, value) = false) Then
				Me._INCOMEACC = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ASSETACC", DbType:="VarChar(255)")>  _
	Public Property ASSETACC() As String
		Get
			Return Me._ASSETACC
		End Get
		Set
			If (String.Equals(Me._ASSETACC, value) = false) Then
				Me._ASSETACC = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MINQTY", DbType:="Int NOT NULL")>  _
	Public Property MINQTY() As Integer
		Get
			Return Me._MINQTY
		End Get
		Set
			If ((Me._MINQTY = value)  _
						= false) Then
				Me._MINQTY = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PC_QTY", DbType:="Int")>  _
	Public Property PC_QTY() As System.Nullable(Of Integer)
		Get
			Return Me._PC_QTY
		End Get
		Set
			If (Me._PC_QTY.Equals(value) = false) Then
				Me._PC_QTY = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_STATUS", DbType:="VarChar(255)")>  _
	Public Property STATUS() As String
		Get
			Return Me._STATUS
		End Get
		Set
			If (String.Equals(Me._STATUS, value) = false) Then
				Me._STATUS = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSalesItemsTR")>  _
Partial Public Class tblSalesItemsTR
	
	Private _transNo As String
	
	Private _itemNo As String
	
	Private _qty As System.Nullable(Of Decimal)
	
	Private _uPrice As System.Nullable(Of Decimal)
	
	Private _discount As System.Nullable(Of Decimal)
	
	Private _amount As System.Nullable(Of Decimal)
	
	Private _cost As System.Nullable(Of Decimal)
	
	Private _pc As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transNo", DbType:="VarChar(255)")>  _
	Public Property transNo() As String
		Get
			Return Me._transNo
		End Get
		Set
			If (String.Equals(Me._transNo, value) = false) Then
				Me._transNo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_itemNo", DbType:="VarChar(255)")>  _
	Public Property itemNo() As String
		Get
			Return Me._itemNo
		End Get
		Set
			If (String.Equals(Me._itemNo, value) = false) Then
				Me._itemNo = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_qty", DbType:="Decimal(20,2)")>  _
	Public Property qty() As System.Nullable(Of Decimal)
		Get
			Return Me._qty
		End Get
		Set
			If (Me._qty.Equals(value) = false) Then
				Me._qty = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_uPrice", DbType:="Decimal(20,2)")>  _
	Public Property uPrice() As System.Nullable(Of Decimal)
		Get
			Return Me._uPrice
		End Get
		Set
			If (Me._uPrice.Equals(value) = false) Then
				Me._uPrice = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_discount", DbType:="Decimal(20,2)")>  _
	Public Property discount() As System.Nullable(Of Decimal)
		Get
			Return Me._discount
		End Get
		Set
			If (Me._discount.Equals(value) = false) Then
				Me._discount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_amount", DbType:="Decimal(20,2)")>  _
	Public Property amount() As System.Nullable(Of Decimal)
		Get
			Return Me._amount
		End Get
		Set
			If (Me._amount.Equals(value) = false) Then
				Me._amount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cost", DbType:="Decimal(20,2)")>  _
	Public Property cost() As System.Nullable(Of Decimal)
		Get
			Return Me._cost
		End Get
		Set
			If (Me._cost.Equals(value) = false) Then
				Me._cost = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pc", DbType:="Int")>  _
	Public Property pc() As System.Nullable(Of Integer)
		Get
			Return Me._pc
		End Get
		Set
			If (Me._pc.Equals(value) = false) Then
				Me._pc = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblSalesDeliver")>  _
Partial Public Class tblSalesDeliver
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _salesDeliverNo As String
	
	Private _transDate As System.Nullable(Of Date)
	
	Private _refNo As String
	
	Private _cardID As String
	
	Private _totalAmount As System.Nullable(Of Decimal)
	
	Private _userID As String
	
	Private _status As String
	
	Private _notimesedit As System.Nullable(Of Integer)
	
	Private _lastdateedit As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnsalesDeliverNoChanging(value As String)
    End Sub
    Partial Private Sub OnsalesDeliverNoChanged()
    End Sub
    Partial Private Sub OntransDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OntransDateChanged()
    End Sub
    Partial Private Sub OnrefNoChanging(value As String)
    End Sub
    Partial Private Sub OnrefNoChanged()
    End Sub
    Partial Private Sub OncardIDChanging(value As String)
    End Sub
    Partial Private Sub OncardIDChanged()
    End Sub
    Partial Private Sub OntotalAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OntotalAmountChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnnotimeseditChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnnotimeseditChanged()
    End Sub
    Partial Private Sub OnlastdateeditChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnlastdateeditChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_salesDeliverNo", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property salesDeliverNo() As String
		Get
			Return Me._salesDeliverNo
		End Get
		Set
			If (String.Equals(Me._salesDeliverNo, value) = false) Then
				Me.OnsalesDeliverNoChanging(value)
				Me.SendPropertyChanging
				Me._salesDeliverNo = value
				Me.SendPropertyChanged("salesDeliverNo")
				Me.OnsalesDeliverNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_transDate", DbType:="DateTime2")>  _
	Public Property transDate() As System.Nullable(Of Date)
		Get
			Return Me._transDate
		End Get
		Set
			If (Me._transDate.Equals(value) = false) Then
				Me.OntransDateChanging(value)
				Me.SendPropertyChanging
				Me._transDate = value
				Me.SendPropertyChanged("transDate")
				Me.OntransDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_refNo", DbType:="VarChar(255)")>  _
	Public Property refNo() As String
		Get
			Return Me._refNo
		End Get
		Set
			If (String.Equals(Me._refNo, value) = false) Then
				Me.OnrefNoChanging(value)
				Me.SendPropertyChanging
				Me._refNo = value
				Me.SendPropertyChanged("refNo")
				Me.OnrefNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_cardID", DbType:="VarChar(255)")>  _
	Public Property cardID() As String
		Get
			Return Me._cardID
		End Get
		Set
			If (String.Equals(Me._cardID, value) = false) Then
				Me.OncardIDChanging(value)
				Me.SendPropertyChanging
				Me._cardID = value
				Me.SendPropertyChanged("cardID")
				Me.OncardIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalAmount", DbType:="Decimal(20,2)")>  _
	Public Property totalAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._totalAmount
		End Get
		Set
			If (Me._totalAmount.Equals(value) = false) Then
				Me.OntotalAmountChanging(value)
				Me.SendPropertyChanging
				Me._totalAmount = value
				Me.SendPropertyChanged("totalAmount")
				Me.OntotalAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="VarChar(255)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(255)")>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_notimesedit", DbType:="Int")>  _
	Public Property notimesedit() As System.Nullable(Of Integer)
		Get
			Return Me._notimesedit
		End Get
		Set
			If (Me._notimesedit.Equals(value) = false) Then
				Me.OnnotimeseditChanging(value)
				Me.SendPropertyChanging
				Me._notimesedit = value
				Me.SendPropertyChanged("notimesedit")
				Me.OnnotimeseditChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_lastdateedit", DbType:="DateTime2")>  _
	Public Property lastdateedit() As System.Nullable(Of Date)
		Get
			Return Me._lastdateedit
		End Get
		Set
			If (Me._lastdateedit.Equals(value) = false) Then
				Me.OnlastdateeditChanging(value)
				Me.SendPropertyChanging
				Me._lastdateedit = value
				Me.SendPropertyChanged("lastdateedit")
				Me.OnlastdateeditChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblUsers")>  _
Partial Public Class tblUser
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _userID As String
	
	Private _username As String
	
	Private _password As String
	
	Private _name As String
	
	Private _role As String
	
	Private _isActive As String
	
	Private _tblSalesOrders As EntitySet(Of tblSalesOrder)
	
	Private _tblSalesQuotations As EntitySet(Of tblSalesQuotation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnroleChanging(value As String)
    End Sub
    Partial Private Sub OnroleChanged()
    End Sub
    Partial Private Sub OnisActiveChanging(value As String)
    End Sub
    Partial Private Sub OnisActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._tblSalesOrders = New EntitySet(Of tblSalesOrder)(AddressOf Me.attach_tblSalesOrders, AddressOf Me.detach_tblSalesOrders)
		Me._tblSalesQuotations = New EntitySet(Of tblSalesQuotation)(AddressOf Me.attach_tblSalesQuotations, AddressOf Me.detach_tblSalesQuotations)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(255)")>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(255)")>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_name", DbType:="VarChar(255)")>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_role", DbType:="VarChar(255)")>  _
	Public Property role() As String
		Get
			Return Me._role
		End Get
		Set
			If (String.Equals(Me._role, value) = false) Then
				Me.OnroleChanging(value)
				Me.SendPropertyChanging
				Me._role = value
				Me.SendPropertyChanged("role")
				Me.OnroleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_isActive", DbType:="VarChar(255)")>  _
	Public Property isActive() As String
		Get
			Return Me._isActive
		End Get
		Set
			If (String.Equals(Me._isActive, value) = false) Then
				Me.OnisActiveChanging(value)
				Me.SendPropertyChanging
				Me._isActive = value
				Me.SendPropertyChanged("isActive")
				Me.OnisActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblUser_tblSalesOrder", Storage:="_tblSalesOrders", ThisKey:="userID", OtherKey:="userID")>  _
	Public Property tblSalesOrders() As EntitySet(Of tblSalesOrder)
		Get
			Return Me._tblSalesOrders
		End Get
		Set
			Me._tblSalesOrders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="tblUser_tblSalesQuotation", Storage:="_tblSalesQuotations", ThisKey:="userID", OtherKey:="userID")>  _
	Public Property tblSalesQuotations() As EntitySet(Of tblSalesQuotation)
		Get
			Return Me._tblSalesQuotations
		End Get
		Set
			Me._tblSalesQuotations.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_tblSalesOrders(ByVal entity As tblSalesOrder)
		Me.SendPropertyChanging
		entity.tblUser = Me
	End Sub
	
	Private Sub detach_tblSalesOrders(ByVal entity As tblSalesOrder)
		Me.SendPropertyChanging
		entity.tblUser = Nothing
	End Sub
	
	Private Sub attach_tblSalesQuotations(ByVal entity As tblSalesQuotation)
		Me.SendPropertyChanging
		entity.tblUser = Me
	End Sub
	
	Private Sub detach_tblSalesQuotations(ByVal entity As tblSalesQuotation)
		Me.SendPropertyChanging
		entity.tblUser = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.tblJobOrder")>  _
Partial Public Class tblJobOrder
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _JONO As String
	
	Private _DATE As System.Nullable(Of Date)
	
	Private _REFNO As String
	
	Private _CARDID As String
	
	Private _pickupDate As System.Nullable(Of Date)
	
	Private _REMARKS As String
	
	Private _userID As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnJONOChanging(value As String)
    End Sub
    Partial Private Sub OnJONOChanged()
    End Sub
    Partial Private Sub OnDATEChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDATEChanged()
    End Sub
    Partial Private Sub OnREFNOChanging(value As String)
    End Sub
    Partial Private Sub OnREFNOChanged()
    End Sub
    Partial Private Sub OnCARDIDChanging(value As String)
    End Sub
    Partial Private Sub OnCARDIDChanged()
    End Sub
    Partial Private Sub OnpickupDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnpickupDateChanged()
    End Sub
    Partial Private Sub OnREMARKSChanging(value As String)
    End Sub
    Partial Private Sub OnREMARKSChanged()
    End Sub
    Partial Private Sub OnuserIDChanging(value As String)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_JONO", DbType:="VarChar(255) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property JONO() As String
		Get
			Return Me._JONO
		End Get
		Set
			If (String.Equals(Me._JONO, value) = false) Then
				Me.OnJONOChanging(value)
				Me.SendPropertyChanging
				Me._JONO = value
				Me.SendPropertyChanged("JONO")
				Me.OnJONOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="DATE", Storage:="_DATE", DbType:="DateTime2")>  _
	Public Property [DATE]() As System.Nullable(Of Date)
		Get
			Return Me._DATE
		End Get
		Set
			If (Me._DATE.Equals(value) = false) Then
				Me.OnDATEChanging(value)
				Me.SendPropertyChanging
				Me._DATE = value
				Me.SendPropertyChanged("[DATE]")
				Me.OnDATEChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REFNO", DbType:="VarChar(255)")>  _
	Public Property REFNO() As String
		Get
			Return Me._REFNO
		End Get
		Set
			If (String.Equals(Me._REFNO, value) = false) Then
				Me.OnREFNOChanging(value)
				Me.SendPropertyChanging
				Me._REFNO = value
				Me.SendPropertyChanged("REFNO")
				Me.OnREFNOChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CARDID", DbType:="VarChar(255)")>  _
	Public Property CARDID() As String
		Get
			Return Me._CARDID
		End Get
		Set
			If (String.Equals(Me._CARDID, value) = false) Then
				Me.OnCARDIDChanging(value)
				Me.SendPropertyChanging
				Me._CARDID = value
				Me.SendPropertyChanged("CARDID")
				Me.OnCARDIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pickupDate", DbType:="DateTime2")>  _
	Public Property pickupDate() As System.Nullable(Of Date)
		Get
			Return Me._pickupDate
		End Get
		Set
			If (Me._pickupDate.Equals(value) = false) Then
				Me.OnpickupDateChanging(value)
				Me.SendPropertyChanging
				Me._pickupDate = value
				Me.SendPropertyChanged("pickupDate")
				Me.OnpickupDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REMARKS", DbType:="VarChar(255)")>  _
	Public Property REMARKS() As String
		Get
			Return Me._REMARKS
		End Get
		Set
			If (String.Equals(Me._REMARKS, value) = false) Then
				Me.OnREMARKSChanging(value)
				Me.SendPropertyChanging
				Me._REMARKS = value
				Me.SendPropertyChanged("REMARKS")
				Me.OnREMARKSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="VarChar(255)")>  _
	Public Property userID() As String
		Get
			Return Me._userID
		End Get
		Set
			If (String.Equals(Me._userID, value) = false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
